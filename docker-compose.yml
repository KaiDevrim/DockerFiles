version: "3.0"
services:
  swag:
    image: ghcr.io/linuxserver/swag
    container_name: swag
    cap_add:
      - NET_ADMIN
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - URL=${SITE}
      - SUBDOMAINS=wildcard,
      - VALIDATION=dns
      - DNSPLUGIN=cloudflare
      - EMAIL=kai@devrim.tech
      - EXTRA_DOMAINS=blog.devrim.tech,dvr.im,f.dvr.im
    volumes:
      - ${ROOT}/swag:/config
    ports:
      - 443:443
      - 80:80
    restart: unless-stopped

  mc:
    image: itzg/minecraft-server
    container_name: minecraft
    environment:
      EULA: "true"
      TYPE: PAPER
      VERSION: 1.16.5
      # needed for Paper versions before 1.14
    #   CONSOLE: "false"
    ports:
      - 25565:25565
    volumes:
      - ${GAMES}/minecraft:/data

  elasticsearch:
    image: elasticsearch:7.8.0
    container_name: elasticsearch
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail localhost:9200/_cluster/health || exit 1",
        ]
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - elastic

  logstash:
    image: logstash:7.8.0
    container_name: logstash
    environment:
      discovery.seed_hosts: logstash
      LS_JAVA_OPTS: "-Xms512m -Xmx512m"
    volumes:
      - ${ROOT}logstash/config/:/usr/share/logstash/pipeline/logstash-nginx.config
      - ${ROOT}logstash/nginx.log:/home/nginx.log
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "5044:5044"
      - "9600:9600"
    depends_on:
      - elasticsearch
    networks:
      - elastic
    command: logstash -f /usr/share/logstash/pipeline/logstash-nginx.config

  kibana:
    image: kibana:7.8.0
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - elastic

  gitea:
    image: gitea/gitea:latest
    container_name: gitea
    environment:
      - DB_TYPE=postgres
      - DB_HOST=gitea_db:5432
      - DB_NAME=gitea
      - DB_USER=${GIT_DB_USER}
      - DB_PASSWD=${GIT_DB_PASS}
    restart: always
    volumes:
      - ${ROOT}/gitea:/data
    ports:
      - 3000:3000
  gitea_db:
    image: postgres:alpine
    container_name: gitea_db
    environment:
      - POSTGRES_USER=${GIT_DB_USER}
      - POSTGRES_PASSWORD=${GIT_DB_PASS}
      - POSTGRES_DB=gitea
    restart: always
    volumes:
      - ${ROOT}/gitea/db:/var/lib/postgresql/data
    expose:
      - 5432

  wordpress_db:
    image: mysql:8.0.19
    container_name: wordpress_db
    command: "--default-authentication-plugin=mysql_native_password"
    volumes:
      - ${ROOT}/wordpress/db:/var/lib/mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${WORDPRESS_DB_ROOT}
      - MYSQL_DATABASE=wordpress_db
      - MYSQL_USER=${WORDPRESS_DB_USER}
      - MYSQL_PASSWORD=${WORDPRESS_DB_PASS}
    expose:
      - 3306
      - 33060
  wordpress:
    image: wordpress:latest
    container_name: wordpress
    ports:
      - 8060:80
    restart: always
    environment:
      - WORDPRESS_DB_HOST=wordpress_db
      - WORDPRESS_DB_USER=${WORDPRESS_DB_USER}
      - WORDPRESS_DB_PASSWORD=${WORDPRESS_DB_PASS}
      - WORDPRESS_DB_NAME=wordpress_db

  netdata:
    image: netdata/netdata
    container_name: netdata
    hostname: netdata.devrim.website # set to fqdn of host
    ports:
      - 19999:19999
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - ${ROOT}/netdata/config:/etc/netdata:ro
      - ${ROOT}/netdata/lib:/var/lib/netdata
      - ${ROOT}/netdata/cache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro

  qbittorrentvpn:
    image: dyonr/qbittorrentvpn
    container_name: qbitvpn
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    ports:
      - 8080:8080
    environment:
      - LAN_NETWORK=${DHCP}/${DHCP_END}
      - VPN_TYPE=openvpn
      - VPN_ENABLED=yes
      - INSTALL_PYTHON3=yes
    volumes:
      - ${ROOT}/qbittorrentvpn:/config
      - ${HDD}/torrents:/downloads

  syncthing:
    image: ghcr.io/linuxserver/syncthing
    container_name: syncthing
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/syncthing:/config
      - ${HDD}/Pictures:/data1
    ports:
      - 8384:8384
      - 22000:22000/tcp
      - 22000:22000/udp
      - 21027:21027/udp
    # sysctls:
    #   - net.core.rmem_max=2097152
    restart: unless-stopped

  librespeed:
    image: ghcr.io/linuxserver/librespeed
    container_name: librespeed
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - PASSWORD=${LIBRESPEED_PASS}
    volumes:
      - ${ROOT}/librespeed:/config
    ports:
      - 8040:80
    restart: unless-stopped

  speedtest:
    container_name: speedtest
    ports:
      - "8010:80"
    volumes:
      - "${ROOT}/speedtest/config.json:/app/web/config.json:ro"
      - ${ROOT}/speedtest/results/:/app/results
    image: e7db/speedtest

  dupeguru:
    container_name: dupeguru
    ports:
      - "5800:5800"
    volumes:
      - "${ROOT}/dupeguru:/config:rw"
      - "${HDD}/storage/:/storage:rw"
    image: jlesage/dupeguru

  dashboard:
    image: phntxx/dashboard:latest
    container_name: dashboard
    restart: unless-stopped
    volumes:
      - ${ROOT}/dashboard:/app/data
    ports:
      - 8020:8080

  organizr:
    image: organizr/organizr
    container_name: organizr
    restart: always
    volumes:
      - ${ROOT}/organizr:/config
    environment:
      - fpm="true"
    ports:
      - 9080:80

  ghost:
    image: ghost:3-alpine
    container_name: ghost
    restart: always
    ports:
      - 2368:2368
    environment:
      # see https://ghost.org/docs/config/#configuration-options
      # database__client: sqlite
      # database__connection__host: ghost_db
      # database__connection__user: ${GHOST_DB_USER}
      # database__connection__password: ${GHOST_DB_PASS}
      # database__connection__database: ghost_db
      # this url value is just an example, and is likely wrong for your environment!
      url: http://localhost:2368
      # contrary to the default mentioned in the linked documentation, this image defaults to NODE_ENV=production (so development mode needs to be explicitly specified if desired)
      #NODE_ENV: development
    volumes:
      - ${ROOT}/ghost:/var/lib/ghost/content

  homer:
    image: b4bz/homer
    #To build from source, comment previous line and uncomment below
    #build: .
    container_name: homer
    volumes:
      - ${ROOT}/homer:/www/assets
    ports:
      - 4040:8080
    #environment:
    #  - UID=1000
    #  - GID=1000
    restart: unless-stopped

  linkding:
    container_name: linkding
    image: sissbruecker/linkding:latest
    ports:
      - 9090:9090
    volumes:
      - ${ROOT}/linkding:/etc/linkding/data

  espial:
    image: "jonschoning/espial:espial"
    container_name: espial
    ports:
      - "3050:3000"
    volumes:
      - "${ROOT}/espial:/app/data"
    environment:
      - IP_FROM_HEADER=true
      - SQLITE_DATABASE=/app/data/espial.sqlite3
      - DETAILED_LOGGING=true
      - SHOULD_LOG_ALL=true
      # - ARCHIVE_SOCKS_PROXY_HOST=localhost
      # - ARCHIVE_SOCKS_PROXY_PORT=8888
      - SOURCE_CODE_URI=https://github.com/jonschoning/espial

  shiori:
    image: radhifadlillah/shiori
    restart: always
    container_name: shiori
    ports:
      - 1000:8080
    volumes:
      - ${ROOT}/shiori:/srv/shiroi

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - 9070:9090
    restart: unless-stopped
    volumes:
      - ${ROOT}/prometheus:/etc/prometheus
      - ${HDD}/prom_data:/prometheus
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3080:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_NAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_PASS}
    volumes:
      - ${ROOT}/grafana:/etc/grafana/provisioning/datasources

  photoprism:
    image: photoprism/photoprism:latest
    container_name: photoprism
    restart: unless-stopped
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    ports:
      - 2342:2342
    environment:
      PHOTOPRISM_ADMIN_PASSWORD: "${PP_ROOT_PASSWORD}" # PLEASE CHANGE: Your initial admin password (min 4 characters)
      PHOTOPRISM_ORIGINALS_LIMIT: 4028 # File size limit for originals in MB (increase for high-res video)
      PHOTOPRISM_HTTP_COMPRESSION: "gzip" # Improves transfer speed and bandwidth utilization (none or gzip)
      PHOTOPRISM_DEBUG: "true" # Run in debug mode (shows additional log messages)
      PHOTOPRISM_PUBLIC: "false" # No authentication required (disables password protection)
      PHOTOPRISM_READONLY: "false" # Don't modify originals directory (reduced functionality)
      PHOTOPRISM_EXPERIMENTAL: "true" # Enables experimental features
      PHOTOPRISM_DISABLE_WEBDAV: "false" # Disables built-in WebDAV server
      PHOTOPRISM_DISABLE_SETTINGS: "false" # Disables Settings in Web UI
      PHOTOPRISM_DISABLE_TENSORFLOW: "false" # Disables using TensorFlow for image classification
      PHOTOPRISM_DARKTABLE_PRESETS: "false" # Enables Darktable presets and disables concurrent RAW conversion
      PHOTOPRISM_DETECT_NSFW: "false" # Flag photos as private that MAY be offensive (requires TensorFlow)
      PHOTOPRISM_UPLOAD_NSFW: "true" # Allow uploads that MAY be offensive
      # PHOTOPRISM_DATABASE_DRIVER: "sqlite"         # SQLite is an embedded database that doesn't require a server
      PHOTOPRISM_DATABASE_DRIVER: "mariadb" # Use MariaDB (or MySQL) instead of SQLite for improved performance
      PHOTOPRISM_DATABASE_SERVER: "prism_mariadb:3306" # MariaDB database server (hostname:port)
      PHOTOPRISM_DATABASE_NAME: "photoprism" # MariaDB database schema name
      PHOTOPRISM_DATABASE_USER: "${PP_USER}" # MariaDB database user name
      PHOTOPRISM_DATABASE_PASSWORD: "${PP_PASSWORD}" # MariaDB database user password
      PHOTOPRISM_SITE_URL: "http://${LAN_IP}:2342/" # Public PhotoPrism URL
      PHOTOPRISM_SITE_TITLE: "Kai's Photos"
      PHOTOPRISM_SITE_CAPTION: "Browse Kai's Life"
      PHOTOPRISM_SITE_DESCRIPTION: "Photos by Kai"
      PHOTOPRISM_SITE_AUTHOR: "Kai Devrim"
      # You may optionally set a user / group id using environment variables if your Docker version or NAS does not
      # support this natively (see next example):
      # UID: 1000
      # GID: 1000
      # UMASK: 0000
    # Uncomment and edit the following line to set a specific user / group id (native):
    # user: "1000:1000"
    volumes:
      # Your photo and video files ([local path]:[container path]):
      - "${HDD}/photoprism/:/photoprism/originals"
      # Multiple folders can be indexed by mounting them as sub-folders of /photoprism/originals:
      # - "/mnt/Family:/photoprism/originals/Family"    # [folder_1]:/photoprism/originals/[folder_1]
      # - "/mnt/Friends:/photoprism/originals/Friends"  # [folder_2]:/photoprism/originals/[folder_2]
      # Mounting an import folder is optional (see docs):
      - "${ROOT}/photoprism/Import:/photoprism/import"
      # Permanent storage for settings, index & sidecar files (DON'T REMOVE):
      - "${ROOT}/photoprism/storage:/photoprism/storage"

  prism_mariadb:
    image: mariadb:10.5
    container_name: photoprism_mariadb
    restart: unless-stopped
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    command: mysqld --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=50
    volumes: # Don't remove permanent storage for index database files!
      - "${ROOT}/photoprism/database:/var/lib/mysql"
    environment:
      MYSQL_ROOT_PASSWORD: ${PP_ROOT_PASSWORD}
      MYSQL_DATABASE: photoprism
      MYSQL_USER: ${PP_USER}
      MYSQL_PASSWORD: ${PP_PASSWORD}

  ubooquity:
    image: ghcr.io/linuxserver/ubooquity
    container_name: ubooquity
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - MAXMEM=<maxmem>
    volumes:
      - ${ROOT}/ubooquity:/config
      - ${HDD}/media/books:/books
      - ${HDD}/media/comics:/comics
      - ${HDD}/apps/ubooquity:/files
    ports:
      - 2202:2202
      - 2203:2203
    restart: unless-stopped

  tautulli:
    image: ghcr.io/linuxserver/tautulli
    container_name: tautulli
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/tautulli:/config
    ports:
      - 8181:8181
    restart: unless-stopped

  taisun:
    image: linuxserver/taisun
    container_name: taisun
    network_mode: bridge
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 6666:3000
    restart: unless-stopped

  synclounge:
    image: ghcr.io/linuxserver/synclounge
    container_name: synclounge
    environment:
      - TZ=${TZ}
      - AUTOJOIN_ENABLED=true
    ports:
      - 8088:8088
    restart: unless-stopped

  sonarr:
    image: ghcr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/sonarr:/config
      - ${HDD}/media/tv:/tv #optional
      - ${HDD}/media/downloads:/downloads #optional
    ports:
      - 9348:8989
    restart: unless-stopped

  snipeit_mysql:
    image: linuxserver/mariadb
    container_name: snipe_mysql
    restart: always
    volumes:
      - ${ROOT}/snipeit/db:/config
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - MYSQL_ROOT_PASSWORD=${SNIPEIT_DB_ROOT}
      - MYSQL_USER=${SNIPEIT_DB_USER}
      - MYSQL_PASSWORD=${SNIPEIT_DB_PASS}
      - MYSQL_DATABASE=snipe
  snipeit:
    image: linuxserver/snipe-it:latest
    container_name: snipe-it
    restart: always
    depends_on:
      - snipeit_mysql
    volumes:
      - ${ROOT}/snipeit:/config
    environment:
      - NGINX_APP_URL=${LAN_IP}:7489
      - MYSQL_PORT_3306_TCP_ADDR=mysql
      - MYSQL_PORT_3306_TCP_PORT=3306
      - MYSQL_DATABASE=snipe
      - MYSQL_USER=${SNIPEIT_DB_USER}
      - MYSQL_PASSWORD=${SNIPEIT_DB_PASS}
      - PGID=1000
      - PUID=1000
    ports:
      - "7489:80"

  snapdrop:
    image: ghcr.io/linuxserver/snapdrop
    container_name: snapdrop
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/snapdrop/:/config
    ports:
      - 7823:80
    restart: unless-stopped

  smokeping:
    image: ghcr.io/linuxserver/smokeping
    container_name: smokeping
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/smokeping:/config
      - ${HDD}/apps/smokeping:/data
    ports:
      - 4563:80
    restart: unless-stopped

  sickgear:
    image: ghcr.io/linuxserver/sickgear
    container_name: sickgear
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - ${ROOT}/sickgear:/config
      - ${HDD}/media/tv:/tv
      - ${HDD}/media/downloads:/downloads
    ports:
      - 4780:8081
    restart: unless-stopped

  sickchill:
    image: ghcr.io/linuxserver/sickchill
    container_name: sickchill
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/sickchill:/config
      - ${HDD}/media/downloads:/downloads
      - ${HDD}/media/tv:/tv
    ports:
      - 3747:8081
    restart: unless-stopped

  scrutiny:
    image: ghcr.io/linuxserver/scrutiny
    container_name: scrutiny
    cap_add:
      - SYS_RAWIO
      - SYS_ADMIN
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - SCRUTINY_API_ENDPOINT=http://${LAN_IP}:6483
      - SCRUTINY_WEB=true
      - SCRUTINY_COLLECTOR=true
    volumes:
      - ${ROOT}/scrutiny:/config
      - /run/udev:/run/udev:ro
    ports:
      - 6483:8080
    devices:
      - /dev/sda:/dev/sda
      - /dev/vda:/dev/vda
      - /dev/vdb:/dev/vdb
    restart: unless-stopped

  sabnzbd:
    image: ghcr.io/linuxserver/sabnzbd
    container_name: sabnzbd
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/sabnzbd:/config
      - ${HDD}/media/downloads:/downloads #optional
      - ${HDD}/media/incomplete-downloads:/incomplete-downloads #optional
    ports:
      - 9999:8080
      - 5:9090
    restart: unless-stopped

  rsnapshot:
    image: ghcr.io/linuxserver/rsnapshot
    container_name: rsnapshot
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/rsnapshot:/config
      - ${HDD}/apps/rsnapshot/snapshots:/.snapshots
      - ${HDD}/apps/rsnapshot/data:/data
    restart: unless-stopped

  resilio-sync:
    image: ghcr.io/linuxserver/resilio-sync
    container_name: resilio-sync
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/resillo-sync:/config
      - ${HDD}/media/downloads:/downloads
      - ${HDD}/apps/resillo-sync:/sync
    ports:
      - 8888:8888
      - 55555:55555
    restart: unless-stopped

  requestrr:
    image: ghcr.io/linuxserver/requestrr
    container_name: requestrr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/requestrr:/config
    ports:
      - 4545:4545
    restart: unless-stopped

  raneto:
    image: ghcr.io/linuxserver/raneto
    container_name: raneto
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/raneto:/config
    ports:
      - 5555:3000
    restart: unless-stopped

  radarr:
    image: ghcr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/radarr:/config
      - ${HDD}/media/movies:/movies
      - ${HDD}/media/downloads:/downloads
    ports:
      - 7878:7878
    restart: unless-stopped

  pyload:
    image: ghcr.io/linuxserver/pyload
    container_name: pyload
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/pyload:/config
      - ${HDD}/media/downloads:/downloads
    ports:
      - 4444:8000
      - 7227:7227
    restart: unless-stopped

  pydio-cells:
    image: ghcr.io/linuxserver/pydio-cells
    container_name: pydio-cells
    hostname: pydio-cells
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - EXTERNALURL=${LAN_IP}:3333
      - SERVER_IP=${LAN_IP}
    volumes:
      - ${ROOT}/pydio-cells:/config
    ports:
      - 3333:8080
      - 33060:33060
    restart: unless-stopped

  projectsend:
    image: ghcr.io/linuxserver/projectsend
    container_name: projectsend
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - MAX_UPLOAD=5000
    volumes:
      - ${ROOT}/projectsend:/config
      - ${HDD}/apps/projectsend:/data
    ports:
      - 2222:80
    restart: unless-stopped

  plex:
    image: ghcr.io/linuxserver/plex
    container_name: plex
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - VERSION=docker
    volumes:
      - ${ROOT}/plex:/config
      - ${HDD}/media/tv:/tv
      - ${HDD}/media/movies:/movies
    restart: unless-stopped

  pixapop:
    image: ghcr.io/linuxserver/pixapop
    container_name: pixapop
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - APP_USERNAME=${PIXAPOP_USER}
      - APP_PASSWORD=${PIXAPOP_PASS}
    volumes:
      - ${ROOT}/pixapop:/config
      - ${HDD}/media/photos:/photos
    ports:
      - 5768:80
    restart: unless-stopped

  papermerge:
    image: ghcr.io/linuxserver/papermerge
    container_name: papermerge
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/papermerge:/config
      - ${HDD}/apps/papermerge:/data
    ports:
      - 1111:8000
    restart: unless-stopped

  overseerr:
    image: ghcr.io/linuxserver/overseerr
    container_name: overseerr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/overseerr:/config
    ports:
      - 5055:5055
    restart: unless-stopped

  ombi:
    image: ghcr.io/linuxserver/ombi
    container_name: ombi
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/ombi:/config
    ports:
      - 3579:3579
    restart: unless-stopped

  nzbhydra2:
    image: ghcr.io/linuxserver/nzbhydra2
    container_name: nzbhydra2
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/nzbhydra2:/config
      - ${ROOT}/media/downloads:/downloads
    ports:
      - 5076:5076
    restart: unless-stopped

  nextcloud:
    image: ghcr.io/linuxserver/nextcloud
    container_name: nextcloud
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/nextcloud:/config
      - ${HDD}/apps/nextcloud:/data
    ports:
      - 8948:443
    restart: unless-stopped

  mysql-workbench:
    image: ghcr.io/linuxserver/mysql-workbench
    container_name: mysql-workbench
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/mysql:/config
    ports:
      - 7804:3000
    cap_add:
      - IPC_LOCK
    restart: unless-stopped

  mylar3:
    image: ghcr.io/linuxserver/mylar3
    container_name: mylar3
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - ${ROOT}/mylar3:/config
      - ${HDD}/media/comics:/comics
      - ${HDD}/media/downloads:/downloads
    ports:
      - 8488:8090
    restart: unless-stopped

  muximux:
    image: ghcr.io/linuxserver/muximux
    container_name: muximux
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/muximux:/config
    ports:
      - 8459:80
    restart: unless-stopped

  mstream:
    image: ghcr.io/linuxserver/mstream
    container_name: mstream
    environment:
      - PUID=1000
      - PGID=1000
      - USER=${MSTREAM_USER}
      - PASSWORD=${MSTREAM_PASS}
      - USE_JSON=true
      - TZ=${TZ}
    volumes:
      - ${ROOT}/mstream:/config
      - ${HDD}/media/music:/music
    ports:
      - 7849:3000
    restart: unless-stopped

  minetest:
    image: ghcr.io/linuxserver/minetest
    container_name: minetest
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - CLI_ARGS="--gameid minetest"
    volumes:
      - ${ROOT}/minetest:/config/.minetest
    ports:
      - 30000:30000/udp
    restart: unless-stopped

  medusa:
    image: ghcr.io/linuxserver/medusa
    container_name: medusa
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/medusa:/config
      - ${HDD}/media/downloads:/downloads
      - ${HDD}/media/tv:/tv
    ports:
      - 3784:8081
    restart: unless-stopped

  lidarr:
    image: ghcr.io/linuxserver/lidarr
    container_name: lidarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/lidarr:/config
      - ${HDD}/media/music:/music
      - ${HDD}/media/downloads:/downloads
    ports:
      - 8686:8686
    restart: unless-stopped

  libreoffice:
    image: ghcr.io/linuxserver/libreoffice
    container_name: libreoffice
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/libreoffice:/config
    ports:
      - 1930:3000
    restart: unless-stopped

  lazylibrarian:
    image: ghcr.io/linuxserver/lazylibrarian
    container_name: lazylibrarian
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - DOCKER_MODS=linuxserver/calibre-web:calibre|linuxserver/mods:lazylibrarian-ffmpeg #optional
    volumes:
      - ${ROOT}/lazylibrarian:/config
      - ${HDD}/media/downloads:/downloads
      - ${HDD}/media/books:/books
    ports:
      - 5299:5299
    restart: unless-stopped

  jellyfin:
    image: ghcr.io/linuxserver/jellyfin
    container_name: jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - JELLYFIN_PublishedServerUrl=${LAN_IP}
    volumes:
      - ${ROOT}/jellyfin:/config
      - ${HDD}/media/tv:/data/tvshows
      - ${HDD}/media/movies:/data/movies
      - /opt/vc/lib:/opt/vc/lib
    ports:
      - 8098:8096
    restart: unless-stopped

  jackett:
    image: ghcr.io/linuxserver/jackett
    container_name: jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - AUTO_UPDATE=true
    volumes:
      - ${ROOT}/jackett:/config
      - ${HDD}/media/downloads:/downloads
    ports:
      - 9117:9117
    restart: unless-stopped

  ipfs:
    image: ghcr.io/linuxserver/ipfs
    container_name: ipfs
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/ipfs:/config
    ports:
      - 6482:80
      - 4001:4001
      - 9145:5001
      - 1729:8080
    restart: unless-stopped

  heimdall:
    image: ghcr.io/linuxserver/heimdall
    container_name: heimdall
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/heimdall:/config
    ports:
      - 4785:80
      # - 443:443
    restart: unless-stopped

  hedgedoc_mariadb:
    image: ghcr.io/linuxserver/mariadb:latest
    container_name: hedgedoc_mariadb
    restart: always
    volumes:
      - ${ROOT}/hedgedoc/db:/config
    environment:
      - MYSQL_ROOT_PASSWORD=${HEDGEDOC_DB_ROOT}
      - MYSQL_DATABASE=hedgedoc
      - MYSQL_USER=${HEDGEDOC_DB_USER}
      - MYSQL_PASSWORD=${HEDGEDOC_DB_PASS}
      - PGID=1000
      - PUID=1000
      - TZ=${TZ}
  hedgedoc:
    image: ghcr.io/linuxserver/hedgedoc:latest
    container_name: hedgedoc
    restart: always
    depends_on:
      - hedgedoc_mariadb
    volumes:
      - ${ROOT}/hedgedoc:/config
    environment:
      - DB_HOST=hedgedoc_mariadb
      - DB_USER=${HEDGEDOC_DB_USER}
      - DB_PASS=${HEDGEDOC_DB_PASS}
      - DB_NAME=hedgedoc
      - DB_PORT=3306
      - PGID=1000
      - PUID=1000
      - TZ=${TZ}
    ports:
      - "5834:3000"

  headphones:
    image: ghcr.io/linuxserver/headphones
    container_name: headphones
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/headphones:/config
      - ${HDD}/media/downloads:/downloads
      - ${HDD}/media/music:/music
    ports:
      - 8182:8181
    restart: unless-stopped

  freshrss:
    image: ghcr.io/linuxserver/freshrss
    container_name: freshrss
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/freshrss:/config
    ports:
      - 7392:80
    restart: unless-stopped

  linx-server:
    container_name: linx-server
    image: andreimarcu/linx-server
    command: -config /data/linx-server.conf
    volumes:
      - ${HDD}/linx:/data/files
      - ${ROOT}/linx:/data/meta
      - ${ROOT}/linx/linx-server.conf:/data/linx-server.conf
    ports:
      - "1010:8080"
    restart: unless-stopped

  sharry:
    image: eikek0/sharry:latest
    container_name: sharry
    command: /opt/sharry.conf
    ports:
      - "9099:9090"
    volumes:
      - ${ROOT}/sharry/sharry.conf:/opt/sharry.conf
    depends_on:
      - sharry_db
  sharry_db:
    image: postgres:13.3
    container_name: sharry_db
    volumes:
      - ${ROOT}/sharry/db:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${SHARRY_DB_USER}
      - POSTGRES_PASSWORD=${SHARRY_DB_PASS}
      - POSTGRES_DB=sharry

  dailytxt:
    image: phitux/dailytxt:latest
    container_name: dailytxt
    restart: always
    environment:
      - PORT=8765
      - SECRET_KEY=${DAILY_SECRET}
      # Set it to False or remove the line completely to disallow registration of new users.
      - ALLOW_REGISTRATION=True
    ports:
      - 8765:8765
      # perhaps you only want:
      # "<host_port>:8765"
    volumes:
      - "${ROOT}/dailytxt:/app/data/"

  foldingathome:
    image: ghcr.io/linuxserver/foldingathome
    container_name: foldingathome
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/FAH:/config
    ports:
      - 7396:7396
      - 36330:36330
    restart: unless-stopped

  firefox:
    image: ghcr.io/linuxserver/firefox
    container_name: firefox
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/firefox:/config
    ports:
      - 3020:3000
    shm_size: "1gb"
    restart: unless-stopped

  filezilla:
    image: ghcr.io/linuxserver/filezilla
    container_name: filezilla
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/filezilla:/config
    ports:
      - 3021:3000
    restart: unless-stopped

  endlessh:
    image: ghcr.io/linuxserver/endlessh
    container_name: endlessh
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - MSDELAY=10000
      - MAXLINES=32
      - MAXCLIENTS=4096
      - LOGFILE=true
    volumes:
      - ${ROOT}/endlessh:/config
    ports:
      - 22:2222
    restart: unless-stopped

  embystat:
    image: ghcr.io/linuxserver/embystat
    container_name: embystat
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/embystat:/config
    ports:
      - 6555:6555
    restart: unless-stopped

  emby:
    image: ghcr.io/linuxserver/emby
    container_name: emby
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/emby:/config
      - ${HDD}/media/tv:/data/tvshows
      - ${HDD}/media/movies:/data/movies
      - /opt/vc/lib:/opt/vc/lib #optional
    ports:
      - 8096:8096
      - 8920:8920
    restart: unless-stopped

  duplicati:
    image: ghcr.io/linuxserver/duplicati
    container_name: duplicati
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/duplicati:/config
      - ${HDD}/backups:/backups
    ports:
      - 8200:8200
    restart: unless-stopped

  dokuwiki:
    image: ghcr.io/linuxserver/dokuwiki
    container_name: dokuwiki
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/dokuwiki:/config
    ports:
      - 7040:80
    restart: unless-stopped

  diskover:
    image: linuxserver/diskover
    container_name: diskover
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ES_HOST=elasticsearch
      - ES_PORT=9200
      - ES_USER=elastic
      - ES_PASS=changeme
      - RUN_ON_START=true
      - USE_CRON=true
    volumes:
      - ${ROOT}/diskover:/config
      - ${HDD}/diskover:/data
    ports:
      - 9490:80
      - 9181:9181
      - 9999:9999
    # mem_limit: 4096m
    restart: unless-stopped
    depends_on:
      - elasticsearch
      - diskover_redis

  diskover_redis:
    container_name: diskover_redis
    image: redis:alpine
    volumes:
      - ${ROOT}/diskover/db:/data


  dillinger:
    image: ghcr.io/linuxserver/dillinger
    container_name: dillinger
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/dillinger:/config
    ports:
      - 8490:8080
    restart: unless-stopped

  digikam:
    image: ghcr.io/linuxserver/digikam
    container_name: digikam
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/digikam:/config
    ports:
      - 5647:3000
    restart: unless-stopped

  darktable:
    image: ghcr.io/linuxserver/darktable
    container_name: darktable
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/darktable:/config
    ports:
      - 8402:3000
    restart: unless-stopped

  daapd:
    image: ghcr.io/linuxserver/daapd
    container_name: daapd
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/daapd:/config
      - ${HDD}/media/music:/music
    restart: unless-stopped

  couchpotato:
    image: ghcr.io/linuxserver/couchpotato
    container_name: couchpotato
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/couchpotato:/config
      - ${HDD}/media/downloads:/downloads
      - ${HDD}/media/movies:/movies
    ports:
      - 5050:5050
    restart: unless-stopped

  cops:
    image: ghcr.io/linuxserver/cops
    container_name: cops
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/cops:/config
      - ${HDD}/media/books:/books
    ports:
      - 3820:80
    restart: unless-stopped

  code-server:
    image: ghcr.io/linuxserver/code-server
    container_name: code-server
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - PASSWORD=${CODE_PASS}
      - SUDO_PASSWORD=${CODE_SUDO_PASS}
      - PROXY_DOMAIN=code.devrim.website
    volumes:
      - ${ROOT}/code:/config
    ports:
      - 8443:8443
    restart: unless-stopped

  calibre-web:
    image: ghcr.io/linuxserver/calibre-web
    container_name: calibre-web
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - DOCKER_MODS=linuxserver/calibre-web:calibre
    volumes:
      - ${ROOT}/calbire-web:/config
      - ${HDD}/media/books:/books
    ports:
      - 8083:8083
    restart: unless-stopped

  calibre:
    image: ghcr.io/linuxserver/calibre
    container_name: calibre
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - PASSWORD=${CALIBRE_PASS}
    volumes:
      - /path/to/data:/config
    ports:
      - 4320:8080
      - 1720:8081
    restart: unless-stopped

  bookstack:
    image: ghcr.io/linuxserver/bookstack
    container_name: bookstack
    environment:
      - PUID=1000
      - PGID=1000
      - APP_URL=bookstack.devrim.website
      - DB_HOST=bookstack_db
      - DB_USER=${BOOKSTACK_DB_USER}
      - DB_PASS=${BOOKSTACK_DB_PASS}
      - DB_DATABASE=bookstackapp
    volumes:
      - ${ROOT}/bookstack:/config
    ports:
      - 6875:80
    restart: unless-stopped
    depends_on:
      - bookstack_db
  bookstack_db:
    image: ghcr.io/linuxserver/mariadb
    container_name: bookstack_db
    environment:
      - PUID=1000
      - PGID=1000
      - MYSQL_ROOT_PASSWORD=${BOOKSTACK_ROOT_PASS}
      - TZ=${TZ}
      - MYSQL_DATABASE=bookstackapp
      - MYSQL_USER=${BOOKSTACK_DB_USER}
      - MYSQL_PASSWORD=${BOOKSTACK_DB_PASS}
    volumes:
      - ${ROOT}/bookstack/db:/config
    restart: unless-stopped

  booksonic-air:
    image: ghcr.io/linuxserver/booksonic-air
    container_name: booksonic-air
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - CONTEXT_PATH=url-base
    volumes:
      - ${ROOT}/booksonic/:/config
      - ${HDD}/media/audiobooks:/audiobooks
      - ${HDD}/media/podcasts:/podcasts
      - ${HDD}/media/othermedia:/othermedia
    ports:
      - 4040:4040
    restart: unless-stopped

  boinc:
    image: ghcr.io/linuxserver/boinc
    container_name: boinc
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - PASSWORD=${BOINC_PASS}
    volumes:
      - ${ROOT}/boinc:/config
    ports:
      - 8123:8080
    restart: unless-stopped

  beets:
    image: ghcr.io/linuxserver/beets
    container_name: beets
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/beets/:/config
      - ${HDD}/media/music:/music
      - ${HDD}/media/downloads:/downloads
    ports:
      - 8337:8337
    restart: unless-stopped

  bazarr:
    image: ghcr.io/linuxserver/bazarr
    container_name: bazarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/bazarr:/config
      - ${HDD}/media/movies:/movies
      - ${HDD}/media/tv:/tv
    ports:
      - 6767:6767
    restart: unless-stopped

  audacity:
    image: ghcr.io/linuxserver/audacity
    container_name: audacity
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/audacity:/config
    ports:
      - 7824:3000
    restart: unless-stopped

  airsonic:
    image: ghcr.io/linuxserver/airsonic
    container_name: airsonic
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/airsonic:/config
      - ${HDD}/media/music:/music
      - ${HDD}/media/playlists:/playlists
      - ${HDD}/media/podcasts:/podcasts
      - ${HDD}/media/other:/media
    ports:
      - 4040:4040
    restart: unless-stopped

  wireshark:
    image: ghcr.io/linuxserver/wireshark
    container_name: wireshark
    cap_add:
      - NET_ADMIN
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/wireshark:/config
    ports:
      - 7823:3000
    restart: unless-stopped

  wikijs:
    image: ghcr.io/linuxserver/wikijs
    container_name: wikijs
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/wikijs:/config
      - ${HDD}/apps/wikijs:/data
    ports:
      - 2308:3000
    restart: unless-stopped

  webtop:
    image: ghcr.io/linuxserver/webtop
    container_name: webtop
    privileged: true
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT}/webtop:/config
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 9804:3000
    shm_size: "1gb"
    restart: unless-stopped


networks:
  dbnet:
  redisnet:
  elastic:
    driver: bridge
